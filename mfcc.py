# -*- coding: utf-8 -*-
"""Speech_Tech_Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zi2vjnLoxBJhjmpEJu3yte__NqMQr3Qp
"""

import numpy as np
import math
import scipy.io.wavfile as wav
import scipy
import matplotlib.pyplot as plt
import librosa
import librosa.display
import scipy.fftpack
from scipy.signal import get_window
from scipy.spatial.distance import cosine

def primary(signal, sr, n_mfcc=13, n_fft=2048, hop_length=512, n_mels=128, fmin=0.0, fmax=None, lifter=22):
    # Compute the magnitude spectrogram of the signal
    spectrogram = np.abs(librosa.stft(signal,win_length=2048, n_fft=n_fft, hop_length=hop_length, center=True, window='hamming'))
    # Generate a Mel filterbank matrix
    mel_basis = librosa.filters.mel(sr=sr, n_fft=n_fft, n_mels=n_mels, fmin=fmin, fmax=fmax)
    # Apply the filterbank to the magnitude spectrogram
    filtered_spectrogram = np.dot(mel_basis, spectrogram)
    # Convert the filtered spectrogram to decibels
    filtered_spectrogram = 20 * np.log10(np.maximum(1e-5, filtered_spectrogram))
    # Compute the MFCCs
    mfccs = scipy.fftpack.dct(filtered_spectrogram, axis=0, type=2, norm='ortho')[:n_mfcc]
    # Apply the cepstral lifter
    if lifter > 0:
        lifter_filter = 1 + (lifter / 2) * np.sin(np.pi * np.arange(n_mfcc) / lifter)
        mfccs *= lifter_filter[:, np.newaxis]
  
    return mfccs

from scipy.fftpack import dct

# Assuming that mfcc_coefficients is an array of size (num_frames, num_mfcc_coefficients)
def extract_delta_cepstrum(mfcc_coefficients):
    # Calculate the first-order difference of the MFCC coefficients
    delta_coefficients = np.zeros_like(mfcc_coefficients)
    delta_coefficients[1:-1, :] = (mfcc_coefficients[2:, :] - mfcc_coefficients[:-2, :]) / 2

    # Apply the DCT to the delta coefficients to obtain the delta cepstral coefficients
    delta_cepstrum = dct(delta_coefficients, type=2, axis=1)

    return delta_cepstrum

def extract_second_order_delta_cepstrum(mfcc_coefficients):
    # Calculate the first-order difference of the MFCC coefficients
    delta_coefficients = np.zeros_like(mfcc_coefficients)
    delta_coefficients[1:-1, :] = (mfcc_coefficients[2:, :] - mfcc_coefficients[:-2, :]) / 2

    # Calculate the first-order difference of the delta coefficients
    delta_delta_coefficients = np.zeros_like(delta_coefficients)
    delta_delta_coefficients[1:-1, :] = (delta_coefficients[2:, :] - delta_coefficients[:-2, :]) / 2

    # Apply the DCT to the delta-delta coefficients to obtain the second-order delta cepstral coefficients
    second_order_delta_cepstrum = dct(delta_delta_coefficients, type=2, axis=1)

    return second_order_delta_cepstrum

def energy_spectrum(signal, sample_rate, frame_length, hop_length):

    n_frames = 1 + (len(signal) - frame_length) // hop_length
    ste = np.zeros(n_frames)
    for i in range(n_frames):
        start = i * hop_length
        end = start + frame_length
        frame = signal[start:end]
        ste[i] = np.sum(frame ** 2) / frame_length

    return ste

def extract_delta_energy(energy):
    # Calculate the first-order difference of the MFCC coefficients
    delta_coefficients = np.zeros_like(energy)
    delta_coefficients[1:-1] = (energy[2:] - energy[:-2]) / 2

    # Apply the DCT to the delta coefficients to obtain the delta cepstral coefficients
    delta_cepstrum = dct(delta_coefficients, type=2)

    return delta_cepstrum

def extract_second_order_delta_energy(energy):
    # Calculate the first-order difference of the MFCC coefficients
    delta_coefficients = np.zeros_like(energy)
    delta_coefficients[1:-1] = (energy[2:] - energy[:-2]) / 2

    # Calculate the first-order difference of the delta coefficients
    delta_delta_coefficients = np.zeros_like(delta_coefficients)
    delta_delta_coefficients[1:-1] = (delta_coefficients[2:] - delta_coefficients[:-2]) / 2

    # Apply the DCT to the delta-delta coefficients to obtain the second-order delta cepstral coefficients
    second_order_delta_cepstrum = dct(delta_delta_coefficients, type=2)

    return second_order_delta_cepstrum

def MFCC(audio):
  signal, sample_rate = librosa.load(audio)
  primary_features = primary(signal, sample_rate)
  # librosa.display.specshow(primary_features, x_axis='time')
  delta_cepstrum = extract_delta_cepstrum(primary_features)
  delta_delta_cepstrum = extract_second_order_delta_cepstrum(primary_features)
  mfcc=np.concatenate((primary_features,delta_cepstrum,delta_delta_cepstrum),axis=0)
  energy=energy_spectrum(signal,sample_rate,1024,512)  
  delta_energy=extract_delta_energy(energy)
  delta_delta_energy=extract_second_order_delta_energy(energy)
  energy=energy.reshape(1,energy.size)
  delta_energy=delta_energy.reshape(1,energy.size)
  delta_delta_energy=delta_delta_energy.reshape(1,energy.size)
  mfcc=mfcc[:,:energy.size]  
  mfcc=np.concatenate((mfcc,energy,delta_energy,delta_delta_energy),axis=0)
  return mfcc


